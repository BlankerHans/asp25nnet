% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_network.R
\name{train_network}
\alias{train_network}
\title{Train a Single-Hidden-Layer Neural Network}
\usage{
train_network(train_loader, targets, dimensions, epochs = 100, lr = 0.01)
}
\arguments{
\item{train_loader}{A list of batches. Each batch must be a list containing:
\code{$batch}: Input matrix of shape (features Ã— batch size),
\code{$idx}: Integer indices corresponding to the observations in the original dataset.}

\item{targets}{Numeric vector of target values for all observations.}

\item{dimensions}{A list specifying the network dimensions, e.g., as returned by \code{getLayerDimensions()}.}

\item{epochs}{Integer specifying the number of training epochs. Default is 100.}

\item{lr}{Numeric learning rate. Default is 0.01.}
}
\value{
A list containing:
\itemize{
\item \code{params}: A list of trained network parameters (weights and biases).
\item \code{history}: A numeric vector of average epoch losses.
}
}
\description{
Trains a feed-forward neural network with one hidden layer using stochastic gradient descent.
}
\details{
For each epoch, this function iterates over all batches, performs a forward pass,
computes the negative log-likelihood loss, backpropagates gradients, and updates parameters.
The loss reported per epoch is the mean of the mean losses per batch.
}
\examples{
# Example usage:
data <- matrix(rnorm(100 * 10), nrow = 10)
loader <- DataLoader(data, batch_size = 20)
dims <- getLayerDimensions(data, out_dim = 2, hidden_neurons = 5)
result <- train_network(loader, rnorm(100), dims, epochs = 10, lr = 0.01)

}
