rnorm(size$n_h * size$n_x, sd = 0.1)
rnorm(3 * 32, sd = 0.1)
?scale
?`$
install.packages(c("usethis", "devtools"))
get(wd)
getwd()
usethis::create_package(path = "C:/Users/penzk/Desktop/Studium/AngSt/Semester 2/Advanced statistical programming/nnet25/asp25nnet", open = FALSE, force = TRUE)
usethis::use_r("init_params")
devtools::document()
usethis::use_r("train_val_test")
?sample()
devtools::document()
?seq_along
nrow(abdom)
library(lmls)
View(abdom)
nrow(abdom)
sample(nrow(abdom))
data <- abdom
data
load_all()
?load_all
library(devtools)
install.packages("devtools")
library(devtools)
library(usethis)
install.packages(usethis)
install.packages("usethis")
library(usethis)
install.packages(devtools)
install.packages("usethis")
library(devtools)
library(usethis)
library(devtools)
x <- rnorm(100)
y <- rnorm(100, 2*x, 1/4*x)
set.seed(42)
n <- 200
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- rnorm(n, mean = 0, sd = 1)
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * abs(x)
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, (y - beta*x)^2,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- 0.5*x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, (y - beta*x)^2,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
set.seed(42)
n <- 200
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- rnorm(n, mean = 0, sd = 1)
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * abs(x)
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, (y - beta*x)^2,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
sigma_x
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- rnorm(n, mean = 0, sd = 1)
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "Quadrat. Residuum",
main = "Heteroskedastie: Varianz abhängig von |x|")
x
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
sigma_x
set.seed(42)
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- rnorm(n, mean = 0, sd = 1)
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * abs(x)
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
# 1) Simuliere x
x <- abs(rnorm(n, mean = 0, sd = 1))
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
View(dataframe)
colnames(dataframe)
colnames(dataframe) <- c("unab", "abh")
load_all()
split <- random_split(dataframe)
train <- split$train
test <- split$test
train
test
length(dataframe) == length(test)+length(train)
length(dataframe)
nrow(dataframe) == nrow(test)+nrow(train)
?scale
train_loader <- DataLoader(split$train)
targets <- dataframe$abh
split <- train_val_test(dataframe)
data <- abdom
set.seed(42)
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- abs(rnorm(n, mean = 0, sd = 1))
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
colnames(dataframe) <- c("unab", "abh")
split <- train_val_test(dataframe)
train <- split$train
test <- split$test
val <- split$val
nrow(dataframe) == nrow(test)+nrow(train)+nrow(val)
train_loader <- DataLoader(split$train)
val
train_loader
split <- train_val_test(dataframe$unab)
data <- abdom
load_all()
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- abs(rnorm(n, mean = 0, sd = 1))
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
colnames(dataframe) <- c("unab", "abh")
split <- train_val_test(dataframe$unab)
[1:2]
1:2
2:1
2:3
split(1)
split[¹]
floor(0.6*nrow(dataframe$unab))
nrow(dataframe$unab)
nrow(dataframe)
dataframe$unab
class(dataframe$unab)
class(as.dataframe(dataframe$unab))
dataframe["unab"]
class(dataframe["unab"])
split <- train_val_test(dataframe["unab"])
train <- split$train
val <- split$val
test <- split$test
nrow(dataframe) == nrow(test)+nrow(train)+nrow(val)
train_loader <- DataLoader(split$train)
targets <- dataframe$abh
dimensions <- getLayerDimensions(train_loader[[1]]$batch, 2, hidden_neurons = 3)
val
val_loader <- DataLoader(split$val)
val_loader
val_targets <- targets[val_loader$idx]
nrow(val_targets)
val_targets
val_loader
val_loader$idx
val
data <- abdom
load_all()
set.seed(42)
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- abs(rnorm(n, mean = 0, sd = 1))
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
colnames(dataframe) <- c("unab", "abh")
split <- train_val_test(dataframe["unab"])
train <- split$train
val <- split$val
test <- split$test
nrow(dataframe) == nrow(test)+nrow(train)+nrow(val)
train_loader <- DataLoader(split$train)
targets <- dataframe$abh
val
rownames(val)
int(rownames(val))
integer(rownames(val))
apply(rownames(val), integer)
rownames(val)
traind_loader[[1]]$idx
train_loader[[1]]$idx
?apply
?rapply
?sapply
sapply(colnames(val), integer)
class(colnames(val))
class(as.vector(colnames(val)))
c(colnames(val))
colnames(val)
rownames(val)
class(rownames(val))
as.integer(rownames(val))
targets <- dataframe$abh
targets[as.integer(rownames(val))]
targets <- dataframe$abh
val_targets <- targets[as.integer(rownames(val))]
dimensions <- getLayerDimensions(train_loader[[1]]$batch, 2, hidden_neurons = 3)
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
train_loader[[1]]$batch
dimensions
dim(train_loader)
train_loader
train_loader[[1]]$batch
dim(train_loader[[1]]$batch)
dim(train_loader[[1]]$batch)[1]
source("~/Schreibtisch/Studium/ASP/asp25nnet/nnet25.R")
dimensions
train_loader[[1]]$batch
source("~/Schreibtisch/Studium/ASP/asp25nnet/testing.R")
source("~/Schreibtisch/Studium/ASP/asp25nnet/testing.R")
data <- abdom
load_all()
set.seed(42)
n <- 500
load_all()
set.seed(42)
n <- 500
beta <- 2
sigma0 <- 0.5
# 1) Simuliere x
x <- abs(rnorm(n, mean = 0, sd = 1))
# 2) Berechne für jede x_i die Fehler‐Std-Dev
sigma_x <- sigma0 * x
# 3) Ziehe heteroskedastische Fehler
eps <- rnorm(n, mean = 0, sd = sigma_x)
# 4) Erzeuge y
y <- beta * x + eps
# Kurzer Blick auf Varianz in Abhängigkeit von x
plot(x, y,
xlab = "x",
ylab = "y",
main = "Heteroskedastie")
dataframe <- as.data.frame(cbind(x, y))
View(dataframe)
colnames(dataframe) <- c("unab", "abh")
split <- train_val_test(dataframe["unab"])
train <- split$train
val <- split$val
test <- split$test
nrow(dataframe) == nrow(test)+nrow(train)+nrow(val)
train_loader <- DataLoader(split$train)
targets <- dataframe$abh
val_targets <- targets[as.integer(rownames(val))]
dimensions <- getLayerDimensions(train_loader[[1]]$batch, 2, hidden_neurons = 3)
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
train_network(train_loader,
targets,
dimensions)
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
dataframe
t(dataframe)
colnames(t(dataframe))
rownames(dataframe)
colnames(t(dataframe))
dataframe[["x"]]
dataframe["unab"]
class(dataframe["unab"])
class(train)
train
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
train_network(train_loader,
targets,
dimensions)
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
init_params(dimensions_list)
init_params(dimensions)
train_loader[[1]]$batch
dim(train_loader[[1]]$batch)
init_params(dimension)$W1
W1 <- init_params(dimensions)$W1
W1
dim(W1)
train_loader[[1]]$batch
dim(train_loader[[1]]$batch)
class(W1)
class(train_loader[[1]]$batch)
W1%*% train_loader[[1]]$batch
dim(W1%*% train_loader[[1]]$batch)
params <- init_params(dimensions)
W1 <- params$W1
params$W2
params$W2%*%(W1%*% train_loader[[1]]$batch)
dimensions
train_network_val_adam(train_loader, targets, dimensions, val, val_targets)
length(train_loader)
train_loader
val targets
val_targets
dim(val)
dim(W1)
clas(val)
class(val)
t(val)
dim(t(val))
W1%*%t(val)
train_network_val_adam(train_loader, targets, dimensions, t(val), val_targets)
load_all()
train(train_loader, targets, dimensions, t(val), val_targets)
train(train_loader, targets, dimensions, t(val), val_targets)
load_all()
